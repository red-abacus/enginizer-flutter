import 'dart:async';

import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';

// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
class S implements WidgetsLocalizations {
  const S();

  static S current;

  static const GeneratedLocalizationsDelegate delegate =
    GeneratedLocalizationsDelegate();

  static S of(BuildContext context) => Localizations.of<S>(context, S);

  @override
  TextDirection get textDirection => TextDirection.ltr;

  String get CAR_WASHING => "Car wash";
  String get PAINT_SHOP => "Painting";
  String get PICKUP_RETURN => "Pickup & Return";
  String get SERVICE => "Service";
  String get TIRE_SHOP => "Tyre shop";
  String get TOW_SERVICE => "Toeing";
  String get appointment_create_error_issueCannotBeEmpty => "Issue cannot be empty";
  String get appointment_create_issues => "Add issue";
  String get appointment_create_step1 => "Choose services";
  String get appointment_create_step2 => "Describe issues";
  String get appointment_create_step3 => "Select providers";
  String get appointment_create_step3_specific => "Specific";
  String get appointment_create_step3_bid => "Auction";
  String get appointment_create_step3_alert => "In Auction mode, the services will bid to carry out your repairs";
  String get appointment_create_step4 => "Schedule appointment";
  String get appointment_create_step2_alert => "Add the problems encountered wiht your car, one on the line";
  String get auth_email => "E-mail";
  String get auth_error_invalidEmail => "Email is not valid";
  String get auth_error_nameReuired => "Name is required!";
  String get auth_error_passwordMismatch => "Passwords are not the same!";
  String get auth_error_passwordTooShort => "Password is too short!";
  String get auth_login => "Login";
  String get auth_name => "Name";
  String get auth_password => "Password";
  String get auth_passwordConfirmation => "Confirm password";
  String get auth_register => "Register";
  String get auth_register_client => "Car holder";
  String get auth_register_provider => "Service provider";
  String get cars_create_error_CCNotSelected => "Capacity not selected!";
  String get cars_create_error_ColorNotSelected => "Color not selected!";
  String get cars_create_error_ITPExpiryEmpty => "ITP empty!";
  String get cars_create_error_MileageEmpty => "Mileage empty!";
  String get cars_create_error_PowerNotSelected => "Power not selected!";
  String get cars_create_error_RCAExpiryEmpty => "RCA empty!";
  String get cars_create_error_RegistrationNumberEmpty => "Registration Number empty!";
  String get cars_create_error_brandNotSelected => "Brand not selected!";
  String get cars_create_error_fuelTypeNotSelected => "Fuel type not selected!";
  String get cars_create_error_modelNotSelected => "Model not selected!";
  String get cars_create_error_transmissionNotSelected => "Transmission not selected!";
  String get cars_create_error_vinEmpty => "VIN empty!";
  String get cars_create_error_yearNotSelected => "Year not selected!";
  String get cars_create_insertVIN => "Insert VIN";
  String get cars_create_itpExpiryDate => "Insert ITP Expiry date";
  String get cars_create_mileage => "Mileage (KM)";
  String get cars_create_rcaExpiryDate => "Insert RCA Expiry date";
  String get cars_create_registrationNumber => "Registration number";
  String get cars_create_selectBrand => "Select brand";
  String get cars_create_selectColor => "Select color";
  String get cars_create_selectFuelType => "Select fuel type";
  String get cars_create_selectModel => "Select model";
  String get cars_create_selectMotorCapacity => "Select motor capacity";
  String get cars_create_selectPower => "Select power";
  String get cars_create_selectTransmission => "Select transmission";
  String get cars_create_selectYear => "Select year";
  String get cars_create_step1 => "Identification";
  String get cars_create_step2 => "Technical";
  String get cars_create_step3 => "Extra";
  String get cars_create_vin => "Insert VIN";
  String get general_add => "Add";
  String get general_back => "Back";
  String get general_continue => "Continue";
  String get general_details => "DETAILS";
}

class $en extends S {
  const $en();
}

class $ro extends S {
  const $ro();

  @override
  TextDirection get textDirection => TextDirection.ltr;

  @override
  String get cars_create_insertVIN => "Inserrează VIN";
  @override
  String get cars_create_error_brandNotSelected => "Marca neselectată!";
  @override
  String get cars_create_selectPower => "Alege putere";
  @override
  String get TOW_SERVICE => "Tractare";
  @override
  String get appointment_create_step4 => "Programează";
  @override
  String get appointment_create_step3 => "Alege furnizor";
  @override
  String get appointment_create_step3_specific => "Specific";
  @override
  String get appointment_create_step3_bid => "Licitatie";
  @override
  String get appointment_create_step3_alert => "In modul Licitatie, service-urile vor licita pentru a va efectua reparatiile";
  @override
  String get appointment_create_step2_alert => "Adaugati problemele intampinate cu masina, cate una pe linie.";
  @override
  String get general_continue => "Continuă";
  @override
  String get cars_create_error_vinEmpty => "VIN necompletat!";
  @override
  String get appointment_create_step2 => "Descrie probleme";
  @override
  String get appointment_create_step1 => "Alege servicii";
  @override
  String get cars_create_selectYear => "Alege an";
  @override
  String get cars_create_error_RegistrationNumberEmpty => "Număr înmatriculare necompletat!";
  @override
  String get SERVICE => "Servisare";
  @override
  String get cars_create_registrationNumber => "Număr înmatriculare";
  @override
  String get general_back => "Înapoi";
  @override
  String get cars_create_selectColor => "Alege culoare";
  @override
  String get general_add => "Adaugă";
  @override
  String get auth_error_passwordMismatch => "Parolele nu sunt la fel!";
  @override
  String get auth_register_provider => "Furnizor servicii";
  @override
  String get PICKUP_RETURN => "Pickup și Return";
  @override
  String get auth_passwordConfirmation => "Confirmă parola";
  @override
  String get cars_create_error_CCNotSelected => "Capacitate neselectată!";
  @override
  String get cars_create_selectBrand => "Alege marcă";
  @override
  String get appointment_create_issues => "Adaugă problemă";
  @override
  String get cars_create_selectTransmission => "Alege transmisie";
  @override
  String get auth_error_nameReuired => "Numele este necesar!";
  @override
  String get cars_create_error_ITPExpiryEmpty => "Expirare ITP necompletată!";
  @override
  String get PAINT_SHOP => "Vopsitorie";
  @override
  String get cars_create_selectMotorCapacity => "Alege capacitate motor";
  @override
  String get cars_create_error_fuelTypeNotSelected => "Tip combustibil neselectat!";
  @override
  String get cars_create_error_ColorNotSelected => "Culoare neselectată!";
  @override
  String get appointment_create_error_issueCannotBeEmpty => "Problemă necompletată!";
  @override
  String get auth_email => "E-mail";
  @override
  String get cars_create_error_yearNotSelected => "An neselectat!";
  @override
  String get auth_name => "Nume";
  @override
  String get auth_register => "Înregistrare";
  @override
  String get cars_create_itpExpiryDate => "Dată expirare ITP";
  @override
  String get auth_register_client => "Posesor auto";
  @override
  String get auth_error_passwordTooShort => "Parola este prea scurtă!";
  @override
  String get CAR_WASHING => "Spălătorie";
  @override
  String get cars_create_step2 => "Technice";
  @override
  String get cars_create_error_modelNotSelected => "Model neselectat!";
  @override
  String get cars_create_step1 => "Identificare";
  @override
  String get TIRE_SHOP => "Vulcanizare";
  @override
  String get cars_create_error_RCAExpiryEmpty => "Expirare RCA necompletată!";
  @override
  String get cars_create_step3 => "Extra";
  @override
  String get auth_error_invalidEmail => "Email nu este valid!";
  @override
  String get auth_password => "Parola";
  @override
  String get cars_create_error_transmissionNotSelected => "Transmisie neselectată !";
  @override
  String get cars_create_selectFuelType => "Alege tip combustibil";
  @override
  String get cars_create_mileage => "Rulaj (KM)";
  @override
  String get cars_create_rcaExpiryDate => "Dată expirare RCA";
  @override
  String get cars_create_vin => "VIN";
  @override
  String get cars_create_selectModel => "Alege model";
  @override
  String get cars_create_error_PowerNotSelected => "Putere neselectată!";
  @override
  String get cars_create_error_MileageEmpty => "Rulaj necompletat!";
  @override
  String get auth_login => "Login";
  @override
  String get general_details => "DETALII";
}

class GeneratedLocalizationsDelegate extends LocalizationsDelegate<S> {
  const GeneratedLocalizationsDelegate();

  List<Locale> get supportedLocales {
    return const <Locale>[
      Locale("en", ""),
      Locale("ro", ""),
    ];
  }

  LocaleListResolutionCallback listResolution({Locale fallback, bool withCountry = true}) {
    return (List<Locale> locales, Iterable<Locale> supported) {
      if (locales == null || locales.isEmpty) {
        return fallback ?? supported.first;
      } else {
        return _resolve(locales.first, fallback, supported, withCountry);
      }
    };
  }

  LocaleResolutionCallback resolution({Locale fallback, bool withCountry = true}) {
    return (Locale locale, Iterable<Locale> supported) {
      return _resolve(locale, fallback, supported, withCountry);
    };
  }

  @override
  Future<S> load(Locale locale) {
    final String lang = getLang(locale);
    if (lang != null) {
      switch (lang) {
        case "en":
          S.current = const $en();
          return SynchronousFuture<S>(S.current);
        case "ro":
          S.current = const $ro();
          return SynchronousFuture<S>(S.current);
        default:
          // NO-OP.
      }
    }
    S.current = const S();
    return SynchronousFuture<S>(S.current);
  }

  @override
  bool isSupported(Locale locale) => _isSupported(locale, true);

  @override
  bool shouldReload(GeneratedLocalizationsDelegate old) => false;

  ///
  /// Internal method to resolve a locale from a list of locales.
  ///
  Locale _resolve(Locale locale, Locale fallback, Iterable<Locale> supported, bool withCountry) {
    if (locale == null || !_isSupported(locale, withCountry)) {
      return fallback ?? supported.first;
    }

    final Locale languageLocale = Locale(locale.languageCode, "");
    if (supported.contains(locale)) {
      return locale;
    } else if (supported.contains(languageLocale)) {
      return languageLocale;
    } else {
      final Locale fallbackLocale = fallback ?? supported.first;
      return fallbackLocale;
    }
  }

  ///
  /// Returns true if the specified locale is supported, false otherwise.
  ///
  bool _isSupported(Locale locale, bool withCountry) {
    if (locale != null) {
      for (Locale supportedLocale in supportedLocales) {
        // Language must always match both locales.
        if (supportedLocale.languageCode != locale.languageCode) {
          continue;
        }

        // If country code matches, return this locale.
        if (supportedLocale.countryCode == locale.countryCode) {
          return true;
        }

        // If no country requirement is requested, check if this locale has no country.
        if (true != withCountry && (supportedLocale.countryCode == null || supportedLocale.countryCode.isEmpty)) {
          return true;
        }
      }
    }
    return false;
  }
}

String getLang(Locale l) => l == null
  ? null
  : l.countryCode != null && l.countryCode.isEmpty
    ? l.languageCode
    : l.toString();
